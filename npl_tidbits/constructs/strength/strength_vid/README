
Description:
============
This program illustrates how to use NPL's 'strength' constructs and provides sandbox for experimenting.

'strength_vid' program illustrates strenght-based mechanism to decide a winning vlan-assignment when multiple tables can assign vlan for flow. In the program there are two sources for vlan assignment:
    a. port_table       :- assigns vlan value based on port on which packet has ingressed.
    b. vlan_protocol_table :- assigns vlan value based on packet protocol.
strength_resolution() construct resolves the winning object based on 'vlan_strength_profile_table' and 'strength_index' provided by each of cos assignment sources.


Contents:
=========
strength_vid
|-- npl
|   |-- strength_vid.npl (main program code)
|   |-- base_helper.npl   (support code that is needed for program to compile & execute)
|-- config.ini            (configuration file that can be used as-is)
|-- Makefile              
|-- bm_tests              (Scripts to support topology, packet crafting, packet send & receive)
    |-- corp_net
    |   |-- testPkt.py
    |   |-- tbl_cfg_vlan.txt
    |-- sf_definition     (Special Function definition to interact with BMI* code)
        |-- bm_sfc.cpp

Compile & Run the program:
==========================
To compile 'strength_vid' program, run following commands from program directory:
   * make fe_nplsim
   * make nplsim_comp
At this point, all files needed to run NPL Behavior Model (BM) are generated.
There are two options to run 'strength_vid' program with NPL BM.
   1. If xterm is supported, just run: 
      *   make nplsim_run    (this is simple and easy way to run)
   2. If xterm is NOT supported then:  (manually running BM components)
      2a. Open two terminal windows and browse to 'strength_vid' program directory.
      2b. Terminal-1: Run 'strength_vid' program's Behavior Model:
          :> source ./ncsc-x.x.x/bin/setup.sh
          cd <npl_example>  
          :> ./fe_output/bmodel/bin/bmodel.sim
      2c. Terminal-2: Run Behavior Model CLI program.
          :> source ./ncsc-x.x.x/bin/setup.sh
          cd <npl_example>  
          :> python $BRCM_NCS_ROOT/ncsc-x.x.x/bmi/cli/bmif_cli.py --regfile ./fe_output/regfiles/nplsim_physical_regsfile.yml


Populate Lookup Tables Run-Time
===============================
Default packet generation script included with the program does following:
   (a). Populate following tables with following entries
        >> port_table[0].default_vid=0xf   ; port default vlan is set to 0xf
        >> vlan_protocol_table[0].vid=0x1  ; vlan for SNAP packet is 0x1
        >> vlan_protocol_table[1].vid=0x2  ; vlan for LLC packet is 0x2
   (b). Set the strength for port_table and vlan_protocol_table
        >> vlan_strength_profile_table[1].vlan_strength=1  ; port_table strength
        >> vlan_strength_profile_table[2].vlan_strength=2  ; vlan_protocol_table strength
        With this configuration, strength of vlan_protocol_table > port_table

Packet Test:
============
   (1). Send a tagged packet from port-0 to BM.
        No vlan assignment is done for outer tagged packet, BM prints out the outer vid
        Receive packet from BM on port-1

   (2). Send an untagged EtherII packet from port-0 to BM.
        EtherII packets will not lookup vlan_protocol_table, vlan assignment is taken
          from port table, BM prints out the vid value 0xf
        Receive packet from BM on port-1

   (3). Send an untagged LLC packet from port-0 to BM
        LLC packets will lookup vlan_protocol_table and port_table, since
          vlan_protocol_table gets higher strength, vid is assigned as 0x1, BM prints
          out the vid assignment value.
        Receive packet from BM on port-1

   (4). Send an untagged SNAP packet from port-0 to BM
        SNAP packets will lookup vlan_protocol_table and port_table, since
          vlan_protocol_table gets higher strength, vid is assigned as 0x2, BM prints
          out the vid assignment value.
        Receive packet from BM on port-1

To run the test, open terminal and browse to 'strength_vid' program directory.
Run the following packet generation script included with the program.
   :> python bm_tests/corp_net/testPkt.py

*BMI: Behavior Model Infrastructure
