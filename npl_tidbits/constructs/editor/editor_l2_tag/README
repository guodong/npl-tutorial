
Description:
============
This program illustrates how to use NPL's 'editor' constructs and provides 
sandbox for experiments.

'editor_l2_tag' program does the following:
  * Parse incoming packet.
  * Checks for number of VLAN tags present in incoming packet.
  * If incoming packet is double-tagged (or) single-outer-tagged then deletes 
  * outer tag from outgoing packet.
  * If incoming packet is untagged (or) single-inner-tagged then adds outer tag 
  * to outgoing packet.
  * Additionally, ethertype field in L2 header is modified.
Following editor constructs are used to modify outgoing packets:
  1. add_header           :- Add new header to packet.
  2. delete_header        :- Deletes a header from packet header stack.
  3. replace_header_field :- Replace a header field with a bus field or another 
                             header field.

Contents:
=========
editor_l2_tag
|-- npl
|   |-- editor_l2_tag.npl (main program code)
|   |-- base_helper.npl   (support code that is needed for program to compile & execute)
|-- config.ini            (configuration file that can be used as-is)
|-- Makefile              
|-- bm_tests              (Scripts to support topology, packet crafting, packet send & receive)
    |-- corp_net
    |   |-- testPkt.py
    |-- sf_definition     (Special Function definition to interact with BMI* code)
        |-- bm_sfc.cpp

Compile & Run the program:
==========================
To compile 'editor_l2_tag' program, run following commands from program directory:
   * make fe_nplsim
   * make nplsim_comp
At this point, all files needed to run NPL Behavior Model (BM) are generated.
There are two options to run 'editor_l2_tag' program with NPL BM.
   1. If xterm is supported, just run: 
      *   make nplsim_run    (this is simple and easy way to run)
   2. If xterm is NOT supported then:  (manually running BM components)
      2a. Open two terminal windows and browse to 'editor_l2_tag' program directory.
      2b. Terminal-1: Run 'editor_l2_tag' program's Behavior Model:
          :> source ./ncsc-x.x.x/bin/setup.sh
          cd <npl_example>  
          :> ./fe_output/bmodel/bin/bmodel.sim
      2c. Terminal-2: Run Behavior Model CLI program.
          :> source ./ncsc-x.x.x/bin/setup.sh
          cd <npl_example> 
          :> python $BRCM_NCS_ROOT/ncsc-x.x.x/bmi/cli/bmif_cli.py --regfile ./fe_output/regfiles/nplsim_physical_regsfile.yml


Packet Test:
============
Default packet generation script included with the program does the following:
   1:
      Input : Sends untagged packet from port-0.
      Output: Received packet is outer tagged, outer TPID is 0x8100.
   2:
      Input : Sends single outer tagged packet from port-0.
      Output: Received packet is untagged.          
   3:
      Input : Sends single inner tagged packet from port-0.
      Output: Received packet is double tagged, outer TPID is 0x8100, inner TPID is 0x9100.
   4.
      Input : Sends double tagged packet from port-0.
      Output: Received packet is single inner tagged, TPID is 0x9100.

To run the test, open terminal and browse to 'editor_l2_tag' program directory.
Run the following packet generation script included with the program.
   :> python bm_tests/corp_net/testPkt.py

*BMI: Behavior Model Infrastructure
