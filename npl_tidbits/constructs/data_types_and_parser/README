
Description:
============
This program illustrates data-types supported in NPL & parser construct.

'data_types_and_parser' program does following:
  * Defines packet header using NPL supported data-types.
  * Defines parsing logic.
  * Parses incoming packet.
  * Extracts packet contents to header fields.
  * Checks if particular header is present in incoming packet and prints its value.

Contents:
=========
data_types_and_parser
|-- npl
|   |-- data_types_and_parser.npl  (main program code)
|   |-- base_helper.npl   (support code that is needed for program to compile & execute)
|-- config.ini            (configuration file that can be used as-is)
|-- Makefile              
|-- bm_tests              (Scripts to support topology, packet crafting, packet send & receive)
    |-- corp_net
    |   |-- testPkt.py
    |-- sf_definition     (Special Function definition to interact with BMI* code)
        |-- bm_sfc.cpp

Compile & Run the program:
==========================
To compile 'data_types_and_parser' program, run following commands from program directory:
   * make fe_nplsim
   * make nplsim_comp
At this point, all files needed to run NPL Behavior Model (BM) are generated.
There are two options to run 'data_types_and_parser' program with NPL BM.
   1. If xterm is supported, just run: 
      *   make nplsim_run    (this is simple and easy way to run)
   2. If xterm is NOT supported then:  (manually running BM components)
      2a. Open two terminal windows and browse to 'data_types_and_parser' program directory.
      2b. Terminal-1: Run 'data_types_and_parser' program's Behavior Model:
          :> source ./ncsc-x.x.x/bin/setup.sh
          cd <npl_example>  
          :> ./fe_output/bmodel/bin/bmodel.sim
      2c. Terminal-2: Run Behavior Model CLI program.
          :> source ./ncsc-x.x.x/bin/setup.sh
          cd <npl_example>  
          :> python $BRCM_NCS_ROOT/ncsc-x.x.x/bmi/cli/bmif_cli.py --regfile ./fe_output/regfiles/nplsim_physical_regsfile.yml


Packet Test:
============
Default packet generation script included with the program does following:
   Input : Sends following packets through port-0 of BehaviorModel:
           a. Double-tagged packet [OUTER:TPID(0x88A8),VLAN-10], [INNER: TPID(0x8100), VLAN-20].
           b. Single-outer-tagged packet [OUTER:TPID(0x88A8),VLAN-10].
           c. Single-inner-tagged packet [INNER:TPID(0x8100),VLAN-20].
           d. Untagged packet.
           d. IP packet with options.
   Output: On Behavior Model console, packet contents are printed.

To run the test, open terminal and browse to 'data_types_and_parser' program directory.
Run the following packet generation script included with the program.
   :> python bm_tests/corp_net/testPkt.py

*BMI: Behavior Model Infrastructure
