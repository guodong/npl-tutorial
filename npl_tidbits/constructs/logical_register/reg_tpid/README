
Description:
============
This program illustrates how to use NPL's 'logical_register' construct and provides sandbox for experimenting.

'reg_tpid' program implements simple configurable 'tag protocol indentifier'(TPID) for parsing VLAN tagged packets.
Program supports four TPIDs. Multiple TPIDs can be selected for identifying tagged status of incoming packet.
It implements this using registers:
  * tpid_enable - 4-bit value. Indicates valid tpid values.
  * tpid_values - 4 * 16-bit TPID values. (ex: 0x8100)

Contents:
=========
reg_tpid
|-- npl
|   |-- reg_tpid.npl  (main program code)
|   |-- base_helper.npl   (support code that is needed for program to compile & execute)
|-- config.ini            (configuration file that can be used as-is)
|-- Makefile              
|-- bm_tests              (Scripts to support topology, packet crafting, packet send & receive)
    |-- corp_net
    |   |-- testPkt.py
    |-- sf_definition     (Special Function definition to interact with BMI* code)
        |-- bm_sfc.cpp

Compile & Run the program:
==========================
To compile 'reg_tpid' program, run following commands from program directory:
   * make fe_nplsim
   * make nplsim_comp
At this point, all files needed to run NPL Behavior Model (BM) are generated.
There are two options to run 'reg_tpid' program with NPL BM.
   1. If xterm is supported, just run: 
      *   make nplsim_run    (this is simple and easy way to run)
   2. If xterm is NOT supported then:  (manually running BM components)
      2a. Open two terminal windows and browse to 'reg_tpid' program directory.
      2b. Terminal-1: Run 'reg_tpid' program's Behavior Model:
          :> source ./ncsc-x.x.x/bin/setup.sh
          cd <npl_example>  
          :> ./fe_output/bmodel/bin/bmodel.sim
      2c. Terminal-2: Run Behavior Model CLI program.
          :> source ./ncsc-x.x.x/bin/setup.sh
          cd <npl_example>  
          :> python $BRCM_NCS_ROOT/ncsc-x.x.x/bmi/cli/bmif_cli.py --regfile ./fe_output/regfiles/nplsim_physical_regsfile.yml


Packet Test:
============
Default packet generation script included with the program does following:
   1. Input : Send tagged packet with VID=1 through port-0 of BM.
      Output: Tag status of the packet and vlan-id are printed on BM console.

   2. Input : Send untagged packet through port-0 of BM.
      Output: Tag status of the packet is printed on BM console.

To run the test, open terminal and browse to 'reg_tpid' program directory.
Run the following packet generation script included with the program.
   :> python bm_tests/corp_net/testPkt.py

*BM  :- Behavior Model
*BMI :- Behavior Model Infrastructure
